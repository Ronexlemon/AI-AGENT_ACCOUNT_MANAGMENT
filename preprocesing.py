import pandas as pd
from sklearn.preprocessing import MinMaxScaler

def preprocess_data(data):
    # Data preprocessing
    prices = [(entry[0], entry[1]) for entry in data["prices"]]
    df = pd.DataFrame(prices, columns=["timestamp", "prices"])
    

    df["timestamp"] = pd.to_datetime(df["timestamp"], unit="ms")

    # Clean price data (handle non-numeric characters)
    df['prices'] = df['prices'].astype(str).str.replace('[^0-9.]', '', regex=True).astype(float)

    # Remove rows with NaN prices
    df = df.dropna(subset=['prices'])
    #get the last 20 items
    df = df.tail(20)
    

    # Calculate price change direction (target variable y)
    df['price_change'] = df['prices'].diff()  # Price change compared to the previous price
    df['Direction'] = (df['price_change'] > 0).astype(int)  # 1 if price went up, 0 if price went down

    # Feature engineering (add lagged prices and moving averages)
    df['Lagged_Price'] = df['prices'].shift(1)
    df['Moving_Avg_10'] = df['prices'].rolling(window=10).mean()
    df['Volatility_10'] = df['prices'].rolling(window=10).std()

    # Drop rows with NaN values generated by shifting and rolling
    df = df.dropna()

    # Normalize the data
    scaler = MinMaxScaler()
    df[['prices', 'Lagged_Price', 'Moving_Avg_10', 'Volatility_10']] = scaler.fit_transform(df[['prices', 'Lagged_Price', 'Moving_Avg_10', 'Volatility_10']])

    # Prepare data for training
    X = df[['prices', 'Lagged_Price', 'Moving_Avg_10', 'Volatility_10']].values  # Features
    y = df['Direction'].values  # Target variable (up = 1, down = 0)

    return X, y, df  # Returning X, y, and the entire processed dataframe (for analysis)
